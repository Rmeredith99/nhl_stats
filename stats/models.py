# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models

# Create your models here.
class StatLine(models.Model):
	year = models.IntegerField()
	playoffs = models.BooleanField()
	assist1st = models.IntegerField()
	assist2nd = models.IntegerField()
	assists = models.IntegerField()
	assistsPer60Minutes = models.FloatField()
	assistsPerGame = models.FloatField()
	avgShotLength = models.FloatField()
	blockedShots = models.IntegerField()
	blockedShotsPerGame = models.FloatField()
	defensiveZoneFaceoffs = models.IntegerField()
	enGoals = models.IntegerField()
	evAssists = models.IntegerField()
	evFaceoffWinPctg = models.FloatField()
	evFaceoffsLost = models.IntegerField()
	evFaceoffsWon = models.IntegerField()
	evGoals = models.IntegerField()
	evPoints = models.IntegerField()
	evTimeOnIce = models.IntegerField()
	evTimeOnIcePerGame = models.FloatField()
	faceoffLoss = models.IntegerField()
	faceoffLossDefensiveZone = models.IntegerField()
	faceoffLossNeutralZone = models.IntegerField()
	faceoffLossOffensiveZone = models.IntegerField()
	faceoffLossWhenAhead = models.IntegerField()
	faceoffLossWhenBehind = models.IntegerField()
	faceoffLossWhenClose = models.IntegerField()
	faceoffWinPctg = models.FloatField()
	faceoffWinPctgDefensiveZone = models.FloatField()
	faceoffWinPctgNeutralZone = models.FloatField()
	faceoffWinPctgOffensiveZone = models.FloatField()
	faceoffWins = models.IntegerField()
	faceoffWinsDefensiveZone = models.IntegerField()
	faceoffWinsNeutralZone = models.IntegerField()
	faceoffWinsOffensiveZone = models.IntegerField()
	faceoffWinsWhenAhead = models.IntegerField()
	faceoffWinsWhenBehind = models.IntegerField()
	faceoffWinsWhenClose = models.IntegerField()
	faceoffs = models.IntegerField()
	faceoffsLost = models.IntegerField()
	faceoffsTaken = models.IntegerField()
	faceoffsWon = models.IntegerField()
	firstGoals = models.IntegerField()
	fiveOnFiveShootingPctg = models.FloatField()
	gameWinningGoals = models.IntegerField()
	gamesPlayed = models.IntegerField()
	giveaways = models.IntegerField()
	goals = models.IntegerField()
	goalsBackhand = models.IntegerField()
	goalsDeflected = models.IntegerField()
	goalsPer60Minutes = models.FloatField()
	goalsPerGame = models.FloatField()
	goalsSlap = models.IntegerField()
	goalsSnap = models.IntegerField()
	goalsTipped = models.IntegerField()
	goalsWraparound = models.IntegerField()
	goalsWrist = models.IntegerField()
	hits = models.IntegerField()
	hitsPerGame = models.FloatField()
	homePlusMinus = models.IntegerField()
	missedShots = models.IntegerField()
	missedShotsHitCrossbar = models.IntegerField()
	missedShotsHitPost = models.IntegerField()
	missedShotsOverNet = models.IntegerField()
	missedShotsPerGame = models.FloatField()
	missedShotsWideOfNet = models.IntegerField()
	offensiveZoneFaceoffs = models.IntegerField()
	otGoals = models.IntegerField()
	penalties = models.IntegerField()
	penaltiesDrawn = models.IntegerField()
	penaltiesDrawnPer60Minutes = models.FloatField()
	penaltiesGameMisconduct = models.IntegerField()
	penaltiesMajor = models.IntegerField()
	penaltiesMatch = models.IntegerField()
	penaltiesMinor = models.IntegerField()
	penaltiesMisconduct = models.IntegerField()
	penaltiesPer60Minutes = models.FloatField()
	penaltyMinutes = models.IntegerField()
	penaltyMinutesPerGame = models.FloatField()
	penaltyShotAttempts = models.IntegerField()
	penaltyShotGoals = models.IntegerField()
	playerBirthCity = models.CharField(max_length=100)
	playerBirthCountry = models.CharField(max_length=100)
	playerBirthDate = models.CharField(max_length=100)
	playerBirthStateProvince = models.CharField(max_length=100)
	playerDraftOverallPickNo = models.IntegerField(null=True)
	playerDraftRoundNo = models.IntegerField(null=True)
	playerDraftYear = models.IntegerField(null=True)
	playerFirstName = models.CharField(max_length=100)
	playerHeight = models.IntegerField()
	playerId = models.IntegerField()
	playerLastName = models.CharField(max_length=100)
	playerName = models.CharField(max_length=100)
	playerNationality = models.CharField(max_length=100)
	playerPositionCode = models.CharField(max_length=100)
	playerShootsCatches = models.CharField(max_length=100)
	playerTeamsPlayedFor = models.CharField(max_length=100)
	playerWeight = models.IntegerField()
	plusMinus = models.IntegerField()
	points = models.IntegerField()
	pointsPer60Minutes = models.FloatField()
	pointsPerGame = models.FloatField()
	ppAssists = models.IntegerField()
	ppFaceoffWinPctg = models.FloatField()
	ppFaceoffsLost = models.IntegerField()
	ppFaceoffsWon = models.IntegerField()
	ppGiveaways = models.IntegerField()
	ppGoals = models.IntegerField()
	ppHits = models.IntegerField()
	ppMissedShots = models.IntegerField()
	ppPoints = models.IntegerField()
	ppShots = models.IntegerField()
	ppTakeaways = models.IntegerField()
	ppTeamGoalsAgainst = models.IntegerField()
	ppTeamGoalsFor = models.IntegerField()
	ppTimeOnIce = models.IntegerField()
	ppTimeOnIcePerGame = models.FloatField()
	roadPlusMinus = models.IntegerField()
	seasonId = models.IntegerField()
	shAssists = models.IntegerField()
	shBlockedShots = models.IntegerField()
	shFaceoffWinPctg = models.FloatField()
	shFaceoffsLost = models.IntegerField()
	shFaceoffsWon = models.IntegerField()
	shGiveaways = models.IntegerField()
	shGoals = models.IntegerField()
	shHits = models.IntegerField()
	shMissedShots = models.IntegerField()
	shPoints = models.IntegerField()
	shShots = models.IntegerField()
	shTakeaways = models.IntegerField()
	shTimeOnIce = models.IntegerField()
	shTimeOnIcePerGame = models.FloatField()
	shifts = models.IntegerField()
	shiftsPerGame = models.FloatField()
	shootingPctg = models.FloatField()
	shootingPlusSavePctg = models.FloatField()
	shotAttempts = models.IntegerField()
	shotAttemptsAgainst = models.IntegerField()
	shotAttemptsAhead = models.IntegerField()
	shotAttemptsBehind = models.IntegerField()
	shotAttemptsClose = models.IntegerField()
	shotAttemptsFor = models.IntegerField()
	shotAttemptsPctg = models.FloatField()
	shotAttemptsPctgAhead = models.FloatField()
	shotAttemptsPctgBehind = models.FloatField()
	shotAttemptsPctgClose = models.FloatField()
	shotAttemptsPctgTied = models.FloatField()
	shotAttemptsRelPctg = models.FloatField()
	shotAttemptsTied = models.IntegerField()
	shots = models.IntegerField()
	shotsBackhand = models.IntegerField()
	shotsDeflected = models.IntegerField()
	shotsPerGame = models.FloatField()
	shotsSlap = models.IntegerField()
	shotsSnap = models.IntegerField()
	shotsTipped = models.IntegerField()
	shotsWraparound = models.IntegerField()
	shotsWrist = models.IntegerField()
	takeaways = models.IntegerField()
	teamGoalsAgainst = models.IntegerField()
	teamGoalsFor = models.IntegerField()
	timeOnIce = models.IntegerField()
	timeOnIcePerGame = models.FloatField()
	timeOnIcePerShift = models.FloatField()
	unblockedShotAttempts = models.IntegerField()
	unblockedShotAttemptsAgainst = models.IntegerField()
	unblockedShotAttemptsAhead = models.IntegerField()
	unblockedShotAttemptsBehind = models.IntegerField()
	unblockedShotAttemptsClose = models.IntegerField()
	unblockedShotAttemptsFor = models.IntegerField()
	unblockedShotAttemptsPctg = models.FloatField()
	unblockedShotAttemptsPctgAhead = models.FloatField()
	unblockedShotAttemptsPctgBehind = models.FloatField()
	unblockedShotAttemptsPctgClose = models.FloatField()
	unblockedShotAttemptsPctgTied = models.FloatField()
	unblockedShotAttemptsRelPctg = models.FloatField()
	unblockedShotAttemptsTied = models.IntegerField()
	zoneStartPctg = models.FloatField()

	# Values that need some changes
	# Changed from IntegerField to BooleanField
	playerInHockeyHof = models.BooleanField()
	playerIsActive = models.BooleanField()

	class Meta:
		db_table = "StatLine"

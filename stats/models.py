# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models

# Create your models here.
class StatLine(models.Model):
	year = models.IntegerField(null=True)
	playoffs = models.BooleanField(null=True)
	assist1st = models.IntegerField(null=True)
	assist2nd = models.IntegerField(null=True)
	assists = models.IntegerField(null=True)
	assistsPer60Minutes = models.FloatField(null=True)
	assistsPerGame = models.FloatField(null=True)
	avgShotLength = models.FloatField(null=True)
	blockedShots = models.IntegerField(null=True)
	blockedShotsPerGame = models.FloatField(null=True)
	defensiveZoneFaceoffs = models.IntegerField(null=True)
	enGoals = models.IntegerField(null=True)
	evAssists = models.IntegerField(null=True)
	evFaceoffWinPctg = models.FloatField(null=True)
	evFaceoffsLost = models.IntegerField(null=True)
	evFaceoffsWon = models.IntegerField(null=True)
	evGoals = models.IntegerField(null=True)
	evPoints = models.IntegerField(null=True)
	evTimeOnIce = models.IntegerField(null=True)
	evTimeOnIcePerGame = models.FloatField(null=True)
	faceoffLoss = models.IntegerField(null=True)
	faceoffLossDefensiveZone = models.IntegerField(null=True)
	faceoffLossNeutralZone = models.IntegerField(null=True)
	faceoffLossOffensiveZone = models.IntegerField(null=True)
	faceoffLossWhenAhead = models.IntegerField(null=True)
	faceoffLossWhenBehind = models.IntegerField(null=True)
	faceoffLossWhenClose = models.IntegerField(null=True)
	faceoffWinPctg = models.FloatField(null=True)
	faceoffWinPctgDefensiveZone = models.FloatField(null=True)
	faceoffWinPctgNeutralZone = models.FloatField(null=True)
	faceoffWinPctgOffensiveZone = models.FloatField(null=True)
	faceoffWins = models.IntegerField(null=True)
	faceoffWinsDefensiveZone = models.IntegerField(null=True)
	faceoffWinsNeutralZone = models.IntegerField(null=True)
	faceoffWinsOffensiveZone = models.IntegerField(null=True)
	faceoffWinsWhenAhead = models.IntegerField(null=True)
	faceoffWinsWhenBehind = models.IntegerField(null=True)
	faceoffWinsWhenClose = models.IntegerField(null=True)
	faceoffs = models.IntegerField(null=True)
	faceoffsLost = models.IntegerField(null=True)
	faceoffsTaken = models.IntegerField(null=True)
	faceoffsWon = models.IntegerField(null=True)
	firstGoals = models.IntegerField(null=True)
	fiveOnFiveShootingPctg = models.FloatField(null=True)
	gameWinningGoals = models.IntegerField(null=True)
	gamesPlayed = models.IntegerField(null=True)
	giveaways = models.IntegerField(null=True)
	goals = models.IntegerField(null=True)
	goalsBackhand = models.IntegerField(null=True)
	goalsDeflected = models.IntegerField(null=True)
	goalsPer60Minutes = models.FloatField(null=True)
	goalsPerGame = models.FloatField(null=True)
	goalsSlap = models.IntegerField(null=True)
	goalsSnap = models.IntegerField(null=True)
	goalsTipped = models.IntegerField(null=True)
	goalsWraparound = models.IntegerField(null=True)
	goalsWrist = models.IntegerField(null=True)
	hits = models.IntegerField(null=True)
	hitsPerGame = models.FloatField(null=True)
	homePlusMinus = models.IntegerField(null=True)
	missedShots = models.IntegerField(null=True)
	missedShotsHitCrossbar = models.IntegerField(null=True)
	missedShotsHitPost = models.IntegerField(null=True)
	missedShotsOverNet = models.IntegerField(null=True)
	missedShotsPerGame = models.FloatField(null=True)
	missedShotsWideOfNet = models.IntegerField(null=True)
	offensiveZoneFaceoffs = models.IntegerField(null=True)
	otGoals = models.IntegerField(null=True)
	penalties = models.IntegerField(null=True)
	penaltiesDrawn = models.IntegerField(null=True)
	penaltiesDrawnPer60Minutes = models.FloatField(null=True)
	penaltiesGameMisconduct = models.IntegerField(null=True)
	penaltiesMajor = models.IntegerField(null=True)
	penaltiesMatch = models.IntegerField(null=True)
	penaltiesMinor = models.IntegerField(null=True)
	penaltiesMisconduct = models.IntegerField(null=True)
	penaltiesPer60Minutes = models.FloatField(null=True)
	penaltyMinutes = models.IntegerField(null=True)
	penaltyMinutesPerGame = models.FloatField(null=True)
	penaltyShotAttempts = models.IntegerField(null=True)
	penaltyShotGoals = models.IntegerField(null=True)
	playerBirthCity = models.CharField(max_length=100, null=True)
	playerBirthCountry = models.CharField(max_length=100, null=True)
	playerBirthDate = models.CharField(max_length=100, null=True)
	playerBirthStateProvince = models.CharField(max_length=100, null=True)
	playerDraftOverallPickNo = models.IntegerField(null=True)
	playerDraftRoundNo = models.IntegerField(null=True)
	playerDraftYear = models.IntegerField(null=True)
	playerFirstName = models.CharField(max_length=100, null=True)
	playerHeight = models.IntegerField(null=True)
	playerId = models.IntegerField(null=True)
	playerLastName = models.CharField(max_length=100, null=True)
	playerName = models.CharField(max_length=100, null=True)
	playerNationality = models.CharField(max_length=100, null=True)
	playerPositionCode = models.CharField(max_length=100, null=True)
	playerShootsCatches = models.CharField(max_length=100, null=True)
	playerTeamsPlayedFor = models.CharField(max_length=100, null=True)
	playerWeight = models.IntegerField(null=True)
	plusMinus = models.IntegerField(null=True)
	points = models.IntegerField(null=True)
	pointsPer60Minutes = models.FloatField(null=True)
	pointsPerGame = models.FloatField(null=True)
	ppAssists = models.IntegerField(null=True)
	ppFaceoffWinPctg = models.FloatField(null=True)
	ppFaceoffsLost = models.IntegerField(null=True)
	ppFaceoffsWon = models.IntegerField(null=True)
	ppGiveaways = models.IntegerField(null=True)
	ppGoals = models.IntegerField(null=True)
	ppHits = models.IntegerField(null=True)
	ppMissedShots = models.IntegerField(null=True)
	ppPoints = models.IntegerField(null=True)
	ppShots = models.IntegerField(null=True)
	ppTakeaways = models.IntegerField(null=True)
	ppTeamGoalsAgainst = models.IntegerField(null=True)
	ppTeamGoalsFor = models.IntegerField(null=True)
	ppTimeOnIce = models.IntegerField(null=True)
	ppTimeOnIcePerGame = models.FloatField(null=True)
	roadPlusMinus = models.IntegerField(null=True)
	seasonId = models.IntegerField(null=True)
	shAssists = models.IntegerField(null=True)
	shBlockedShots = models.IntegerField(null=True)
	shFaceoffWinPctg = models.FloatField(null=True)
	shFaceoffsLost = models.IntegerField(null=True)
	shFaceoffsWon = models.IntegerField(null=True)
	shGiveaways = models.IntegerField(null=True)
	shGoals = models.IntegerField(null=True)
	shHits = models.IntegerField(null=True)
	shMissedShots = models.IntegerField(null=True)
	shPoints = models.IntegerField(null=True)
	shShots = models.IntegerField(null=True)
	shTakeaways = models.IntegerField(null=True)
	shTimeOnIce = models.IntegerField(null=True)
	shTimeOnIcePerGame = models.FloatField(null=True)
	shifts = models.IntegerField(null=True)
	shiftsPerGame = models.FloatField(null=True)
	shootingPctg = models.FloatField(null=True)
	shootingPlusSavePctg = models.FloatField(null=True)
	shotAttempts = models.IntegerField(null=True)
	shotAttemptsAgainst = models.IntegerField(null=True)
	shotAttemptsAhead = models.IntegerField(null=True)
	shotAttemptsBehind = models.IntegerField(null=True)
	shotAttemptsClose = models.IntegerField(null=True)
	shotAttemptsFor = models.IntegerField(null=True)
	shotAttemptsPctg = models.FloatField(null=True)
	shotAttemptsPctgAhead = models.FloatField(null=True)
	shotAttemptsPctgBehind = models.FloatField(null=True)
	shotAttemptsPctgClose = models.FloatField(null=True)
	shotAttemptsPctgTied = models.FloatField(null=True)
	shotAttemptsRelPctg = models.FloatField(null=True)
	shotAttemptsTied = models.IntegerField(null=True)
	shots = models.IntegerField(null=True)
	shotsBackhand = models.IntegerField(null=True)
	shotsDeflected = models.IntegerField(null=True)
	shotsPerGame = models.FloatField(null=True)
	shotsSlap = models.IntegerField(null=True)
	shotsSnap = models.IntegerField(null=True)
	shotsTipped = models.IntegerField(null=True)
	shotsWraparound = models.IntegerField(null=True)
	shotsWrist = models.IntegerField(null=True)
	takeaways = models.IntegerField(null=True)
	teamGoalsAgainst = models.IntegerField(null=True)
	teamGoalsFor = models.IntegerField(null=True)
	timeOnIce = models.IntegerField(null=True)
	timeOnIcePerGame = models.FloatField(null=True)
	timeOnIcePerShift = models.FloatField(null=True)
	unblockedShotAttempts = models.IntegerField(null=True)
	unblockedShotAttemptsAgainst = models.IntegerField(null=True)
	unblockedShotAttemptsAhead = models.IntegerField(null=True)
	unblockedShotAttemptsBehind = models.IntegerField(null=True)
	unblockedShotAttemptsClose = models.IntegerField(null=True)
	unblockedShotAttemptsFor = models.IntegerField(null=True)
	unblockedShotAttemptsPctg = models.FloatField(null=True)
	unblockedShotAttemptsPctgAhead = models.FloatField(null=True)
	unblockedShotAttemptsPctgBehind = models.FloatField(null=True)
	unblockedShotAttemptsPctgClose = models.FloatField(null=True)
	unblockedShotAttemptsPctgTied = models.FloatField(null=True)
	unblockedShotAttemptsRelPctg = models.FloatField(null=True)
	unblockedShotAttemptsTied = models.IntegerField(null=True)
	zoneStartPctg = models.FloatField(null=True)

	# Values that need some changes
	# Changed from IntegerField to BooleanField
	playerInHockeyHof = models.BooleanField(null=True)
	playerIsActive = models.BooleanField(null=True)

	class Meta:
		db_table = "StatLine"

#######################################################
# Start of code dealing with custom metrics

class CustomMetric(models.Model):
	string = models.CharField(max_length=200)
	label = models.CharField(max_length=200, default="default")
	username = models.CharField(max_length=200, default="")

	class Meta:
		db_table = "CustomMetric"

class CustomStat(models.Model):
	player = models.ForeignKey(StatLine, related_name = "custom_stat_player", on_delete=models.CASCADE)
	value = models.FloatField(null=True)
	metric = models.ForeignKey(CustomMetric, on_delete=models.CASCADE)

	class Meta:
		db_table = "CustomStat"

